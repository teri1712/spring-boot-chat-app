name: Spring Boot Chat Application CI with Maven

on:
    # Triggers the workflow on push or pull request events but only for the "main" branch
    push:
        branches: [ "**" ]
    pull_request:
        branches: [ "**" ]

jobs:
    build:
        # The type of runner that the job will run on
        runs-on: ubuntu-latest

        # Service containers to run with the job
        services:
            mysql:
                # Docker Hub image for MySQL
                image: mysql:8.0
                # Environment variables to set up the database
                env:
                    MYSQL_ROOT_PASSWORD: root
                    MYSQL_DATABASE: chatapp
                # Health check to ensure the database is ready before tests run
                ports:
                    - 3306:3306
                options: >-
                    --health-cmd "mysqladmin ping -h localhost"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
            redis:
                # Docker Hub image for Redis
                image: redis/redis-stack:latest
                # Health check to ensure Redis is ready
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 6379:6379

        steps:
            # 1. Checks out repository under $GITHUB_WORKSPACE
            -   name: Checkout repository
                uses: actions/checkout@v4

            # 2. Set up JDK 17 and cache Maven dependencies
            -   name: Set up JDK 17
                uses: actions/setup-java@v4
                with:
                    java-version: '17'
                    distribution: 'temurin'
                    cache: 'maven'

            # 3. Build with Maven and run tests
            # The env variables override application properties to connect to the service containers
            -   name: Build and test with Maven
                env:
                #                    SPRING_DATASOURCE_URL: jdbc:mysql://localhost:${{ job.services.mysql.ports[3306] }}/chatapp
                #                    SPRING_DATASOURCE_USERNAME: root
                #                    SPRING_DATASOURCE_PASSWORD: root
                #                    SPRING_REDIS_HOST: redis # 'localhost' correctly resolves to the service container network
                #                    SPRING_REDIS_PORT: ${{ job.services.redis.ports[6379] }}
                working-directory: ./practice
                run: mvn -B clean package

#    deploy:
#        needs: build
#        runs-on: ubuntu-latest
#        steps:
#            -   name: Checkout repository
#                uses: actions/checkout@v4
#
#            -   name: Deploy to Heroku
#                uses: akhileshns/heroku-deploy@v3.12.12
#                with:
#                    heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
#                    heroku_app_name: "messenger-clone-decade"
#                    heroku_email: ""
#                    usedocker: true
